#include "World.h"
#include "Ray.h"

/* ------------------------------------------------------------------------------------------------ */
/* -------------------------------------- World Constructor --------------------------------------- */
/* ------------------------------------------------------------------------------------------------ */
World::World(shared_ptr<Hittables> object)
{
	Add(object);
}

World::~World()
{
	/* - Clears World - */
	m_Scene.clear(); 
}
/* ------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------ */


/* ------------------------------------------------------------------------------------------------ */
/* ------------------------------------ Add Objects To World -------------------------------------- */
/* ------------------------------------------------------------------------------------------------ */
void World::Add(shared_ptr<Hittables> object)
{
	m_Scene.push_back(object);
}
/* ------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------ */


/* ------------------------------------------------------------------------------------------------ */
/* ------------------------------------ Check If World Is Hit ------------------------------------- */
/* ------------------------------------------------------------------------------------------------ */
bool World::hit(const Ray& ray, float t_min, float t_max, RayPayload& rec) const
{
	RayPayload temp_rec;
	bool hit_anything = false;
	auto closest_so_far = t_max;
	int objectIndex = 0;

	for (const auto& object : m_Scene)
	{
		if (object->hit(ray, t_min, closest_so_far, temp_rec))
		{
			hit_anything = true;
			closest_so_far = temp_rec.closestT;
			rec = temp_rec;
			rec.objectSceneIndex = objectIndex;
		}
		objectIndex++;
	}

	return hit_anything;
}
/* ------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------ */


/* ------------------------------------------------------------------------------------------------ */
/* ---------------------------------- Calculate Object Hit Values --------------------------------- */
/* ------------------------------------------------------------------------------------------------ */
void World::ClosestHitShader(const Ray& ray, RayPayload& rec) const
{
	m_Scene[rec.objectSceneIndex]->ClosestHitShader(ray, rec);
	
}
/* ------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------ */
